Chordshop User Guide
====================

Introduction
------------

The primary goal of Chordshop is to produce high quality PDF chord sheets and
chord sheet collections.  It uses the general ChordPro format and adds some extensions of its
own.  These extensions allow for advanced features like the support of
measures, on-the-fly transposition, and dual chord lines to show capoed chords
along with the actual chords.  It also provides a handy GUI for
editing ChordPro-like files and for exploring chord fingerings.

Why Use Chordshop?
------------------

There are plenty of programs that create chord sheets very well, but they
typically produce output with too little or too much information, or they
require too much effort to make a simple chord sheet.  The chord sheets that I
wanted to produce needed to have the usual chords over lyrics as well as timing
and performance information typically found in a leadsheet.

Chordshop provides this mix between a simple chord/lyric sheet and an actual
leadsheet.  The chords and lyrics can be printed in measures separated by
barlines. The barlines can also be "dotted" to indicate repeats, and repeat
brackets can be added to measures as well.  Sections of songs can be designated
as blocks for easy song navigation (e.g. chorus, bridge, verses).

The source files are simple text files in an extended ChordPro format.  Your
existing ChordPro files can be used as is.  (If you want to use Chordshop's
advanced features then you will need to add some notation to the files.)
Chordshop has a Song Editor built-in which can automatically convert plain text
chords into ChordPro format, add directives, transpose chords, and perform
other time-saving tasks.

Another major goal of Chordshop was to produce a tool that could be used with
any fretted instrument.  Most chord programs seem to be guitar-centric.
Chordshop produces chord diagrams for any instrument you care to define.  (Most
common instruments are already defined.)  The built-in Chord Explorer supports
any tuning with any number of strings.  It should help novice and expert alike
explore chord voicings for virtually any fretted instrument.

Requirements
------------

These are minumum versions; later ones should work.

- Python 2.3
- wxPython 2.5.1.5 (2.4 will not work!)
- ReportLab 1.19

Downloading
-----------
You can download Chordshop in two forms:
- Python Chordshop
  + This is the "source package", but it can also be run as is.
  + This can be run on any platform, but it requires certain packages to be preinstalled
    like Python, wxPython, and ReportLab.
  + This is packaged as a zip file.  Every platform has some version\variation of `unzip`,
    so this should not be a problem.  Also note that these files will use Windows line endings.
- Windows Chordshop
  + This is a standalone binary package that comes with all of the prerequisites included.
  + This is packaged as a self-extracting archive.  (It uses 7-zip for really good compression.)
  + If you want the source, download the Python Source package as well.

Chordshop Copyright and License Information
-------------------------------------------

There is some more licence info in the licenses documentation link:licenses.html[here].
At the very least, here is what you need to know about Chordshop:

************
Copyright (C) 2004 Blake T. Garretson
Email: blakeg@freeshell.org

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
USA.
************

If you downloaded the Windows binary package, some other packages were included.
You can read about their licenses (and find out how to get their source) in the
link:licenses.html[licenses documentation] as well.

Basic Concepts
--------------

Chordshop comes with its own philosophy, and it helps to understand this
approach before diving into using it.

I like plain text source files that are largely readable on their own.  I
should be able to edit them with any text editor I choose.  I should also be able to
feed these plain source files into the program from the command line to produce
great output with all the same features that the GUI has.  (If you are a Unix geek,
you can generate songbooks with nothing more that `vi` and a command-line.)  This allows for
batch processing and easy creation of song collections.  This is accomplished by separating
the code into two distinct programs: `cs2pdf` (the chord sheet generator) and `chordshop`
(the graphical frontend to `cs2pdf`.)  `cs2pdf` can be run as a standalone program, and does not
need the `chordshop` specific requirements installed to function (such as wxPython).  When
the name "Chordshop" is used in the documentation and elsewhere, it generallly refers to both
of these programs in a collective manner.  It is important to note that using the command-line
`cs2pdf` is never 'necessary' since the `chordshop` frontend exposes all of the functionality
as well.

Another major concept is the separation of content and presentation.  The song source files
should only contain song specific information.  The display of the content should not be tied to
the source file.  This allow the user to utilize the same source file for multiple songbooks that
may use different fonts, instruments, transposition and capoing, etc.

This separation is achieved through Songbook files.  These are plain text files listing all of the
songs to be included in the collection, along with any configuration variables to be set for that
particular Songbook.

Here are a few other goals set at the beginning of this project:
- The PDF output should look outstanding.  It should look professional and it
  ought to look good enough to be found in a "real" chord book.
- The PDF output should be fully bookmarked and indexed for easy navigation in
  both printed and electronic form.
- The program should run on any platform that I might use, be it Linux, Unix,
  Windows, Mac, etc.

Configuration Scheme
--------------------
Order of configuration precedence:

- `cs2pdf.cfg` file
    * All of the available variables and default variables are in here.
    * Change anything you like, but never delete a variable.  That *will*
      break things.  You can comment out lines if you like with a "#".
- Songbook file variables
    * See the Songbook File Format Guide
    * The are the lines that begin with "!"
- Chordpro Plus set directives
    * See  the Chordshop File Format Guide
    * Example: \{set:variable=value}
- Songbook file "pipe" overrides
    * See the Songbook File Format Guide
    * After any given song title, variables can be changed for that
      specific song.
    * The pipe character is the delimiter.


Songbook Generation Configuration Variables
-------------------------------------------

The complete list of configuration variables is in the `cs2pdf.cfg` file.
Here are descriptions of the most important.  All boolean varibles use 0 for "off"
or "false" and 1 for "on" or "true".

Transposition and Capoing
~~~~~~~~~~~~~~~~~~~~~~~~~

The `transpose` and `capo` variables can be combined, but `transpose` takes precedence. This means
that the song will 'first' be transposed as indicated, and then capoed.

transpose::
    This takes a comma separated list of (major) keys or intervals and adds the transposed
    versions to the output PDF. If intervals are used, both positive and negative
    numbers are accepted to transpose up or down.  If keys are used (e.g. C, G, Eb, F#),
    then the \{key:} directive 'must' be set as well so a starting point is established. +
    +
    If a comma separated list of values is given instead of a single value,
    the song is transposed and added to the PDF in the order that they are given.  The
    original key is not written the file unless specified with a zero value interval or
    the original key in the key list. The different versions of the song are
    labeled by their key, so adding the \{key:} directive is highly recommended. +
    +
    The default value of `transpose` is 0, which indicates that nothing should be transposed.

capo::
    If this is set, then two lines of chords will be printed: one line contains the chord shapes
    actually played, and the other shows the chords as they are heard when capoed at the given fret.
    The chords in the file are treated as the chords that will be *played* (not heard).
    If the key directive is included in the file, its value should be the key in which the
    chords are written. +
    +
    Like the `transpose` variable, multiple values can be given (e.g. capo=2,3,5)
    and the multiple versions will be put into the same PDF file.  The base
    key (the played key) will be the same in all of them, and the perceived
    chords change. +
    +
    A key directive is not required with `capo`, but it is strongly encouraged.
    If it is not given, the PDF outline titles are
    rather generic like "Song Title (Subtitle) -> Capo 2" instead of a more informative
    "Song Title (Subtitle) -> in C, Capo 2 into D". +
    +
    The default `capo` value is 0. For a capo list, one of the items can be a zero,
    and that version of the song is printed without the double
    chord lines.  It will look like there is no capo directive for that one item, but the
    rest will work as expected.

Miscellaneous
~~~~~~~~~~~~~

index::
    This determines style of index to use (or not use).
    It can take these values:
    - 0 = do not create index
    - 1 = create alphabetized index
    - 2 = create alphabetized index if there is more than one song
    - 3 = create unalphabetized index
    - 4 = create unalphabetized index if there is more than one song

chordpro_mode::
    Forces ChordPro Plus files to be printed without measures and bars,
    i.e. just like normal ChordPro files.  The bars are extracted from the file if they are there,
    but then ignored during writing.

instrument::
    Set this to a chord definition file name to choose the instrument.

Fonts
~~~~~

The fonts used in the generated PDF files are all listed in the `cs2pdf` configuration file.
Acrobat Reader comes with 14 fonts built in, and these are the fonts that Chordshop supports.
Any other fonts used in PDF's would need to be embedded, and that complicates matters and increases
the PDF filesize.  By using the internal fonts, Chordshop generated PDF files are usually very small.
A 1KB ChordPro Plus file will often produce a 5 KB PDF.

The 14 fonts available for use are:
- Courier
- Courier-Bold
- Courier-BoldOblique
- Courier-Oblique
- Helvetica
- Helvetica-Bold
- Helvetica-BoldOblique
- Helvetica-Oblique
- Symbol
- Times-Bold
- Times-BoldItalic
- Times-Italic
- Times-Roman
- ZapfDingbats

Cleary, there isn't much reason to use Symbol or ZapfDingbats, so that leaves you with
a respectable collection of three font families: a serif, sans serif, and monospaced font; each in
regular, bold, italic (Oblique), and bold plus italic (BoldOblique).  The choices aren't overwhelming,
but they cover all of the major categories that anyone should need.  I will probably never add support
for any additional fonts.

